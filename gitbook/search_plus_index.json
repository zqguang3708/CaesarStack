{"./":{"url":"./","title":"SomeTechnology","keywords":"","body":"ATechnologyBook "},"Technology/Git.html":{"url":"Technology/Git.html","title":"Git","keywords":"","body":"Git：分布式版本控制软件 这意味着，本地也会有版本控制仓库（V1、V2、V3版本），本地修改后，一般先（把V4）提交到本地的版本控制仓库，再（把V4）推送到中心服务器仓库。 官网 Git官网 Git for Windows git的相关工作区域 工作区 已入版本库 新修改 暂存区 版本库 FIRST COMMAND git --version git --help git help xxx 全局初始化 配置文件相关 项目配置文件 文件位置：当前项目文件/.git/config --local 全局配置文件 文件位置：~/.gitconfig --global 系统配置文件 文件位置：/etc/.gitconfig --system 个人信息配置 git config --global user.name \"Hasee\" git config --global user.email \"940@qq.com\" 验证配置： git config --global --get-all user.name git config --global --get-all user.email git config --list 开始仓库 开始仓库有两种方法： 创建新的仓库 克隆仓库 下面介绍创建新的仓库，克隆仓库见Github克隆仓库。 仓库初始化 进入仓库目录 git init 初始化后产生.git文件夹。 .git文件夹：存放着Git管理信息的目录，初始化仓库时会自动创建。 如果想移除仅仅移除git而保留项目文件，则只需要删除.git文件夹即可。 另外，可用自行创建.gitignore文件，里面放着git忽略的文件（git不管理的文件），一个文件一行，可以用通配符。 日常使用 参考git相关工作区域部分。 检测文件的状态 git status 如果没有修改或者已经commit了，则不显示 如果修改了还未add，则显示红色modified 如果修改了，add了，但是没有commit，则显示绿色modified git diff 只显示修改了还未add的具体修改情况。 查看版本信息 git log git log --graph --pretty=format:\"%h %s\" git reflog # 可以查看被reset的版本，即之后的版本 不同文件状态之间的反复横跳 恢复回原始文件 git checkout -- xxx 修改了未add的，恢复成未修改的状态 添加到本地库暂存区 git add xxx git add . 本地库暂存区退回工作区修改状态 get reset HEAD 提交到本地版本控制仓库（生成版本） git commit -m \"注释xxx\" 从版本控制仓库退回到暂存区 git reset --soft 版本hash 从版本控制仓库退回到工作区修改状态 git reset --mix 版本hash 版本回滚【完整回滚至工作区】 git reset --hard 版本hash 分支相关 git的后一个版本只保存修改的位置，没修改的地方回通过一个指针指向前一个版本。 主分支一般默认是master。 查看分支 git branch 其中带*的绿色的是当前分支。 创建分支 git branch xxx 新创建的分支指向当前分支的当前版本。 删除分支 git branch -d xxx 切换分支 git checkout xxx 合并分支 git merge xxx 将xxx分支的内容合并到当前分支上。 合并的时候可能出现冲突，解决方法是手动修复，然后重新提交（add、commit）。 解决冲突的高阶操作见配合Beyond Compare解决冲突。 变基 作用是将多个提交记录合并成一个。 申请合并 git rebase -i 版本Hash 从该版本到现在的提交记录合并 git rebase -i HEAD~3 最近三次提交合并 修改合并后的记录情况 将 pick 123231 pick 123232 pick 123233 修改为： pick 123231 s 123232 s 123233 pick是保留的版本，其他的改为s。 commit提交。 版本标签相关 可以认为是版本的别名，在Github上可以显示。 git tag -a v1 -m \"xxx\" 在本次记录上打一个tag标签 推送到远程 git push origin --tags Github配合 连接到Github上 本地创建密钥 ssh-keygen -t -rsa -C \"940@qq.com\" 在~.ssh目录中（如C:\\Users\\zqg.ssh），生成了id_rsa和id_rsa.pub文件。其中前者是私钥，后者是公钥。 将密钥上传到Github上 在Github-头像-Settings-SSH and GPG keys-New SSH key，添加公钥的内容。 测试联通性 ssh -T git@github.com 与远程库关联 检查本地的库是否已经关联 git remote -v 添加关联 git remote add origin \"http://github.com/zqg/test.git\" 意思是添加了一个本地标识（别名）：origin，这个别名指向后面的URL。 删除关联 git remote remove origin 推送 完整写法： git push origin main master origin是关联的本地标识，main是本地分支，master是远程分支。 远程分支可以缺省，则与本地同名。 git push -u origin main master -u意思是设为默认，以后可以直接缺省推送： git push 拉取 克隆（首次拉取） git clone http://github.com/zqg/test.git ./ ./可以缺省，则在当前目录下创建一个子文件夹，名字为远程库名。 此时，拉取的仓库只显示master分支，但是依然可以直接切换分支。（只是切换前不显示而已） 往本地仓库拉取合并 git pull origin xxx 这个命令等同于： git fetch origin xxx git merge origin origin/xxx 或者 git fetch origin xxx git rebase origin/xxx 其中，fetch是把远程仓库拉到本地版本库，merge是把本地版本库放回本地工作区。 协同工作 在Github-头像-Settings-Collaborators，邀请用户即可添加协同工作者。 高阶操作 配合Beyond Compare解决冲突 git config --global merge.tool bc git config --global mergetool.path 'D:\\BeyondCompare\\BCompare.exe' git config --global mergetool.keepBackup false 使用方法： git mergetool "},"Technology/GitBook.html":{"url":"Technology/GitBook.html","title":"GitBook","keywords":"","body":"GitBook 有本地版和网页版两种。推荐使用本地版。 网页版：GitBook网页版 以下介绍本地版。 本地版基本信息 本地版依赖node.js，且由于GitBook长期未维护，只能使用v10.21.0及之前的版本。所以推荐使用nvm管理node.js。 GitBook in npm 在npm官网搜索GitBook，里面会有具体的说明。 安装 npm install gitbook-cli -g FIRST COMMAND 查看版本： gitbook -v 初始化项目 在项目文件夹中， gitbook init 会自动创建README.md和SUMMARY.md，分别是介绍文档和目录文档。 和Github类似，GitBook也提供了忽略文件，GitBook会依次读取.gitignore，.bookignore，.ignore文件。一个文件一行，可以用通配符。 npm init 由于后面使用npm管理，所以需要进行npm初始化。 如果你真的不使用npm管理，也可以不进行这一步。 会自动创建npm项目的配置文件package.json。 初始化配置和插件 初始化配置文件 在项目文件夹根目录新建book.js或book.json文件，作为配置文件。 注意，json文件内不能含有注释。如果想加注释，只能用js文件。 常用配置如下，以book.json为例： { \"title\": \"书名\", \"description\": \"描述\", \"isbn\": \"图书编号\", \"author\": \"作者\", \"lang\": \"zh-cn\", \"plugins\": [\"search-pro\", \"code\", \"expandable-chapters\", \"back-to-top-button\", \"theme-lou\"], \"pluginsConfig\": { \"fontSettings\": { \"theme\": \"sepia\", \"family\": \"sans\", \"size\": 4 } }, \"vairables\": {} } 插件相关 查找插件 插件同样在npm官网搜索，关键词为gitbook-plugin-。 常用插件列举 增强搜索： npm install gitbook-plugin-search-pro 代码框： npm install gitbook-plugin-code 菜单折叠： npm install gitbook-plugin-expandable-chapters 返回顶部： npm install gitbook-plugin-back-to-top-button 自定义主题插件： npm install gitbook-plugin-theme-主题名 插件安装方法 在配置文件中（book.js或book.json）下的plugins的list里添加插件名。只添加gitbook-plugin-后面的即可，如： search-pro code expandable-chapters back-to-top-button theme-主题名 theme-aleen42 theme-beauty theme-comscore theme-cuav theme-door theme-gestalt-yl theme-het-ycy theme-jolie theme-lou theme-seers Write Book 章节配置说明 SUMMARY.md是链接列表文件，名字是章节的名字，链接指向章节文件的路径。 子章节可以直接内嵌。 例如： # 概要 - [第一章](part1/README.md) - [1.1 第一节](part1/writing.md) - [1.2 第二节](part1/gitbook.md) - [第二章](part2/README.md) - [2.1 第一节](part2/feedback_please.md) - [2.2 第二节](part2/better_tools.md) 具体内容 直接写相关md文件即可。 启动项目 有两种方法进行： 使用gitbook管理运行 使用npm管理运行 有两种启动方式： 打包成HTML静态文件并启动Web服务 仅打包成HTML静态文件 这两种方法都可以任意选择启动方式 GitBook管理运行 打包并启动Web服务 在项目文件夹中， gitbook serve 在项目根目录会生成book文件夹，里面是HTML静态文件。同时可以通过以下网址访问。 http://localhost:4000 仅打包成HTML静态文件 在项目文件夹中， gitbook build 同上，只不过不会开启Web服务。 npm管理运行 修改package.json文件，在scripts下面添加： \"scripts\":{ \"serve\": \"gitbook serve\", \"build\": \"gitbook build\" } 然后通过以下命令运行： npm run serve npm run build 使用效果同上。 高阶操作 Nginx配置文件参考 server { listen 8065; server_name 你的服务器IP; location / { charset utf-8; root /electronic-book-demo/build/; index index.html index.htm; } } server { listen 80; server_name demo.域名.com; location / { charset utf-8; root /electronic-book-demo/build/; index index.html index.htm; } } "},"Technology/Nginx.html":{"url":"Technology/Nginx.html","title":"Nginx","keywords":"","body":"Nginx 官网 Nginx Nginx官方使用方法 安装 解压即可使用。 FIRST COMMAND 查看版本： nginx -v 配置 Nginx使用他运行的目录作为配置中相对路径的前缀。 配置文件 在当前工作目录/conf/nginx.conf文件。 监听端口 http/server/listen可以设置监听端口。 负载均衡 http/server/location/proxy_pass可以设置请求转发地址池。 weight是各服务器被访问到的权重，数值越大访问到的几率越高。 静态资源 /hhtp/server/location/ 例如： index index.html 错误日志文件 在当前工作目录/logs/error.log文件。 使用方法 进入工作目录。 开启Nginx服务 start nginx 开启后访问以下网址进行测试： http://localhost 查看Nginx服务 tasklist /fi \"imagename eq nginx.exe\" 其中有两个Nginx进程，一个是主进程，一个是工作进程。 关闭Nginx服务 nginx -s stop nginx -s quit 前者是快速停止，可能并不保存相关信息；后者是完整有序的停止，并保存相关信息。 使用新配置重载 nginx -s reload 重写log文件 nginx -s reopen 缺陷 多副本启动 尽管可以启动多个副本，但是只有一个可以工作。 UDP相关 不支持UDP代理。 "},"Technology/Node.js.html":{"url":"Technology/Node.js.html","title":"Node.js","keywords":"","body":"Node.js 说明 相关的有三个软件： Node.js本体 Node.js官网 npm Node.js包管理器，会随本体自动安装 npm官网 nvm Node.js版本管理器，需要自行安装 nvm in Github nvm for Windows 安装 有两种安装思路： 利用nvm安装 手动安装 推荐使用nvm安装，因为有的包只能使用相应版本的Node.js。 利用nvm安装 直接安装nvm。 查看已安装的版本 nvm list 查看所有可以安装的版本 nvm list available 安装指定版本（同时包括Node.js本体和npm） nvm install 14.0.0 查看当前版本 nvm current 切换当前版本 nvm use 14.0.0 手动安装 下载对应版本直接安装。 FIRST COMMAND node -v npm -v node -h 使用方法 初始化环境 进入项目文件夹 npm init 查看安装的插件 npm list 查找插件 在npm官网搜索需要的包，里面有具体的使用说明。 安装插件 npm install xxx npm i xxx 运行插件 npm run npm run xxx "}}